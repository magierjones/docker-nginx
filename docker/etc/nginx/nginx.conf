user nginx;
worker_processes 2;
pid /run/nginx.pid;

events {
    # the maximum number of connections the server can process is the result of:
    # worker_processes * worker_connections
    # 512 mb ram <> 1024
	worker_connections 1024;
    # enabled multi_accept which causes nginx to attempt to immediately accept as many connections as it can, subject to the kernel socket setup.
	multi_accept on;
    # finally use of the epoll event-model is generally recommended for best throughput.
    use epoll;
}

http {

	##
	# Basic Settings
	##
    # to avoid network congestion, the TCP stack implements a mechanism that waits for the data up to 0.2 seconds
    # so it wonâ€™t send a packet that would be too small.
    # "tcp_nodelay on" is at the odds with "tcp_nopush on" as they are mutually exclusive, but nginx has special behavior
    # that if you have "sendfile on", it uses "tcp nopush" for everything but the last package and then turns nopush off
    # and enables nodelay to avoid 0.2 sec delay
    # tcp_nodelay sends it out instantly.
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;

    # the client_body_timeout and client_header_timeout directives are responsible
    # for the time a server will wait for a client body or client header to be sent after request.
    # if neither a body or header is sent, the server will issue a 408 error or Request time out.	client_body_timeout 12;
    client_body_timeout 12;
    client_header_timeout 12;

    # the keepalive_timeout assigns the timeout for keep-alive connections with the client.
    # simply put, Nginx will close connections with the client after this period of time.
	keepalive_timeout 15;
	send_timeout 10;

	##
	# Logging Settings
	##
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Virtual Host Configs
	##
	index index.html index.htm;

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}
